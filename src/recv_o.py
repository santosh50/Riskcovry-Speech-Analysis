import speech_recognition as sr
  
import os
import base64
import json
from pydub import AudioSegment
from pydub.silence import split_on_silence
from subprocess import Popen
from speech_recognition import (Recognizer, AudioFile)
from speech_recognition import (UnknownValueError, RequestError)


audio_base64 = b'T2dnUwACAAAAAAAAAABkAAAAAAAAADI5MFABE09wdXNIZWFkAQE4AYA+AAAAAABPZ2dTAAAAAAAAAAAAAGQAAAABAAAAWxHrFgEYT3B1c1RhZ3MIAAAAV2hhdHNBcHAAAAAAT2dnUwAAOFoBAAAAAABkAAAAAgAAAAd34O5cCAkRKC0pLSgmNC85MSogJTE4Mzc0LjIsJi0wLTInLBwqMywvOS4nJyUnKTEtMi4wMyotOiYyMycvMjU0MDErKCYkHCMvKjU1Nzw1LjAkNSsyNy4uLzQ1Ky8yODNIC+TBNuzFgEgHyXIn4UTqUEgH0iGUycvRMnU4TDoZUce3SIAI29Pjy+sqa/l4aGGpUnnzoyGVLmkkmP3ZHlCQNVZRWxqJzjqKgEiBsIW/wU5Ny7clTbx7w0A2QIfs4pZUkHwVsq83Nj1DtX5/RxUsHh8l4aInNkiBt3rQSltxg9E/2P9H9bji3vpAXiIAXYMDTke2t9sZe6LBWVFIOkSESInfUnKUPoSL2pKHqdZkRwuCpaNdR6oOu+6hKDWBG3a4jSe5wf14DBt9PdCASDE0YDvTcx82p31zZt4uq41czC5dBoXEnM9MdiJ8aSRHpOANWNKfwEiJKFQl/s70i0TxGCj306tleKo94N5z410k+OJR+RowXhtVMB4HSIkwbCSnleNRbAxVDS6oziqBEHrsBxLjklTr9HkH4TAod466Vkaf0vsy/JGsbmjRKdxAwEiJUC5sdtcD5FR/AVC1LmH75i8Fh28yXJ+F+gtYdQEjAjShZaCPMhlAxqQ+MNqASKMSDJ2MB9imT/uHhmExa+NsubiBt5g79a8FxxOp9FkvNgcbaAoVs4ggpfWRANIZPKNrRmTKtXHGSKs5N3YumEVtjh820TammvYHSey/B3fRiu3LkHO6nMXRATBPLbKlPveN9h7BflcPmEippH/HhTpt/pSgc6DNwI28wU8MOCWv4pzzI8/8LoJTq33+yrx4N+Mb+UinUINYRmFnieB+xTWkApVOiW9Kkwic6ik6F1Xx3xCASKZFmp20qc1ffAm7HtuosW5EUZxv1ecp1kv+TkqQCFqQicbXkEik3gu85kYXXkSh2wxrw32IlkK79jHtwrOiTrezKrGGdq3mL7qtUXbD8s3yDsOuB7hIoh9XcFRPDamYjRVuCAJBEop+KEXYEQYx7b3hFKZJrXem2vyBbIqi1qKWoa2GhXo8YTBp/GXQjEielUz2GV/twuIxBET0EDpVQ/NS/Y0S7uqyoZxL4whnYL5amuNNvkTc8mP9dFagC3nYSkid5z232arNfS60/EDj9tnAEm5wZwHLVsC+h6QYb7F3fqaZ5eOtv9trpBXCpOTgGm/KzJBmPtBIpm+LWfwwS3RoNYDhZtf9YmRPKtMK+Sznsnrq6bdo1poFLJeQJOjjX0PtTFwvzmEKWf2USKSv+DiktIvUC3+gG0NWgGJy2c4TckShSouIjsMZJQcMPw8hYLGPCi78EGLhpEiiJHU0YhwWeQJFH6NjwzlFPcyMT/B/nWamh1Zz1Zp7RV8dIGY7WomQsIkDnd2qK3GASKE8pmr3t5G7l0Ea9f7/ytij5txwZbtjuZRyjKeY4Nymr4MMXOFi4HxAnx5IoTpuB9727zZmtM1qh1Q2Hlco2N1CTFNhIBSlCOqor4BaqB5qgEihTKwvsLpIjmIa99g58jML2+PKEy/2+VEzJt0ajuNkHt+RaLheqlt2ZqO4IEihWJ3K7VrGiLQq6vCOkbnPFW+42oUQMae42mc3xtUbhX8wbKsHNFnIObmZhhEyOEihT2EirHoWMRCO1Yxyz4VHxSrIwdeU9l3MaoWH59uJL3rpLBfGRz1Eug/AgEigtv0gQbBtA5PgtFhTHXB7iBCW43ITFAxTe+KyFMDx00pcgmCLAXw9X6rDJi3I4APYSJqIsTvX5oCH5fstmWdxB38gAW/wHyF6c99Zm0IbXpHmMzwoa+JASAOyrFnDB8d2EIw3AnPx9UqdH5yKCmzt1AbPZPp8IikGnO5Y79w/n+h3aRRIBPOfar5ReTq/72t11lY6nA6Z6SBFYqMedcmoSIahgUsSrcshn8pqY1/6qbKxLrTlqKAoBjKRb8JaJw0CUqBuywEWHKRASII4WtsBEyekRiWY1i3MYKlzVSU5LxoEEigv9JraSySyTVBUWPydUn0hUnySMNtTumuASIkE8WMd7hdLSi5xIZVjHpW+iyXrjZXMJ22RSh0NkrVig81g2KlNOEvUwtBIgHd7EC/yd7RhwZ6qVzbGG0b+MCJ9ogo8RLqMkHervW5B7UyB38vdRu0y6+0J4EiaaDyZIOpPJ/ZLJ8QGnznug090TOJIBdDU7zKis/+pCVYVSQPnLX5awtGOMYBGAq3q2ZjgMlF3oEid4rbDbjIpnF49jyGB+mlKmp85chCIWXElKV0UKlUKDFa21uA205qnaxD/s0BIoF/MWoG+jpyF6f+3PJzES5dQWJbXtgvqJFC8PunT1uRSYnbFTGdIoVQn75pEXLzZGj+kpACrnDaODs/azq0jbF1xwtDkNMqic+WXZ6hIomfIOgOVBtusB2WMwAZP0W6cebqt0C7q1Ocs2ZW9Eoi/FjtASKEFqEvk91Z8H8KtIkcwA/NxxMT5+BEq4tV3p3+b7+VmkaFtLtP4SJzlbfDDxX18ea0PdMjd3Xq1tWTNHuyjwDBSOw6VxnffQx+uAtOeNTpImgnNU3odcU6QezvG2bLVinqO6rrPvsPNAT0uGuVpHMl0djoV59lnnkR7JujC1ToQSAJlSzgIl99Oaw5zN2x/2Qk5lBbdvDWTGlDo0n6kAalxHOGhljPjLLmCRxLQSJjnbP/Ee9X5v1dZW7JU/Hco61TVO2Fl9ybLPIkshOvj/9s+OLS0pNoCXm6Qmre4U4BImmMtNzVT+89aT+EGow2eCjTT0lW0T9bzulBXnxqoihzqFHxV+Wy90RMgKjkXSJuX2u0aigoGmQYCoNNFR78/EwYNgebn1FX7vUV1IinUeVGlqglMBhVPtQSrDQ7ESJqD6QNv6AqxSwRqFIx9WUbNEhdeZbIytGtXAChPxTwob8+UwHllhno9g1SPCvQtQnhCSJkfywYk95yOMpnhHsK8fsahlqsgZbF6eWgaNjimQezVIvA85NG/g9OUSIBrry9buZU/h1x0fWYaJVWGALOOox3t9yzHNZoBAJyw/kYTDfuXPRJpEoFASJkRnZ40bVsORwA4dZKOy4YLx2O6DhaRyynTFb1d4+uZsvpmnsf2hOfEI+mz8Rd2imVgSsBYPfWKIEiaFz3fBO8R3Q41Q683qIC7tyVCIV0Z2lIKQHPewyV1cBNfOGU2SJnDrO5ZnysA76WNWhFAsQUwLSh0F6geWJmYcWFYniX+XTuWkBj5eytPNvJQQUQraIBImlx8G/vRAUbmBNR6mc3Hlx8janJLwFw+sW6sJr/rUnOrH7Ng0XHlpeuhT5/tejhoTIBImau63MqIBLbOUtkdceP7Wx29H6mn2QYexyR+Rr16ZIHpbulGjcBImQtWBPKaFs7MZawU8VLUDtSuh5QUYLnhMFgu5qFjODdxsQ+bNtzaHF3viTTy7UiZEQxSjJyPk9QJK1vOEwuD6CHeUnmrSrLIbeTURL8i+xWDxOTp9mMPoI7d+q7BnsDASJsjfVO5+f29MCG+w33kPhbKmCXnGZp2tD72J3IjzGU8AHs/ssy4OdR+CPdMVhx1DHOVNoBInEOtXT4pU2ZJrmBMT1WqOj01BJSqjZN87EAJUSh64Rzoep8OarHRK+n5DcUlmKyL6XwwSJvq5qxu32t0pscGTTjeT28fDJHUGWuPVatRVzVXcmr8R+kpDeYq5LiEB4KzR2tASIDFruwU5MtNsX+oKpne8W7dKDjW6DB2mY4U+nURSxelFXyM49UovA2vRugqLZc/TEgD9S+yieTWLee5lxCPomXW0RoyFH/SvznUcNGZRmypPTeCzr+9a180jJ5IKOxQ3EsvwhHXoH2BZiUsTBtFiiX6MRyIJgiKZ8NJvezasIXhOCJhSBq+pP6rSFKfGK918PPAu5GtH9Xf+5huU/JbkCFSF5/ejMDkhJBIF+v5FyqViIx/wxqfHCinXzFaOTKGlNuwuSvsSDgmfucsMrhIDpRmsoWusePVDI3ROlslb0gGUmEUr/n+so9QSA8UcgJ0hOUXZ6tgurTwrS+8I4zr9YDyGaHAzzLr5PiMYFBIgBbXfUtzlHp++r9m8zEU/9dv8NDnamgsXyTQUU7+hjv2rdup7u2rtdy+p83ygEiCvBsluqKjmRaOXZ4EINgMFMq7Q/RpqJQcylRAT03RJWznwFXzGeg9gEieTl9j3y5bLTt4BXUUYoxh00+5e555JTTp+taAIfSw2ejwHb4S6GaI+eLaGVTzcBbs7el4SJ1YtYwri7YmCCaer8Axb9YQ+X0t1pXcQuSq9PvF8k5nUqDa3MobeTDZ16Kn1sY9eF8wFQ5InnHHfEZBVTwbg0uNmKqjnVo+tQ9AC+s/lZ7q5KyhylGBdcyWnHBshSh2/zDFstqt0G/CmAj4SJr3+48AttZDsjmQp78jre7lErQLnlBo9Y8uULuZegNd4ZtEJNg3IJQKdPtWr54Z23MY5kbDYy8yc1KASIexZLPJb2B2DH/vLzlGl6sg/n//JgRQD+bdviHXGR0RheMQeiQZ1Sp8raMjHwww5lMozMBIiT97zCUkvUbamdV8692g/pLcm29kqFD0eSdEMSp5Vx5FjJC08j60g3ZXp9s/SIn1LsYsTC/Wr4bZN09njM34Pw8LBU9X4bIN92tv7SNY8ThKhMBU2IpjZGfGpBKISCyoOZ6O5dc631gdtThfUXJzqZ+0XENEPIhnSgdrkTKomMfkSIBWkCBgSyCDTYLlaAI/VbGhtzmzaI/V2mK21h509KDrlSIK5+HaYj/aOOETFbduf/Or/UJImcOMX8Wh8UQsHT5tsIh7vn+Xnp6ibikVkYAHVj3gnUnB7cD/aE6ek6bkSJm8sI8i0dIOEjFmd4h0bQWWYlSAQ8/nhIbFEBzdildaPOXIUEoM7ZGhxwhdWfEHFixImdTQIeXjKfmkFkVFhbmWI73K1jgYolTGEi7Gnnaek5YmKk2IJYKXriUbsFzJ/AIeDJT2m9aQSJovpclrmFgRYjpuBmyC0jGG/GH0ZziHrFthERgJFcz90sqIUy1Ki+U9+oY+SEiZqw1uStwNIRa96e5tIdMzWKeZ+WMm44a7qaRwmMHgWtc5sOJOIXojHfCuP6BIhyW3kzcUHARZSsI65YBm/hmIx6bBKVrkCdv5dTKj8FgPgvJw5a43bwLoqiHMl0iHsXPWqDjIb9GSSo6k9Yzxb0xkhaMfdOyFHhx7Z8RlOu4Wi2E6AmeB2+WXYqQ9oskzBoRIiVGk2mf1NcmR43ux7GILPUNVn7FOp82Pc5JB25OcPSwRuxKv3VahKCtBYEiWaVhdlcR/QEiBXxyh013gMp2uP3JZfrmnlv68ct3WeyEBBvso2uu6+O1DwiJoQ9IG9IhIgJkWJvdFtuB09X8KH7lrqHEPsB11gaTU/5c1LWiKPV3gVnzjD5CtuJQtRRRf7EiAl2ABiQ3yO37HS6VA0s1hGASh8a8mhYwklt1LJ6fLeQFex4hqJqQqG12ncJrg3OcISJpsDeb7l3T2NHP65Uk9h/vphSYXL92GPnVm22xQUerNcOdr7s2ozsDKnRxvHUrTrMQ8qqynwKBInSxUWtVnnKsgzt9alwIrXCphcceBW7QmDmexeRoRp8TbdfcaioezNqfBOJUetPVV8RhPZ2dTAAA4pQEAAAAAAGQAAAADAAAAXS5KAxQvKzkxNjUwLyoxKyomISAjJiAmIUibp3R/xEYbVaNm6ut+klZmIvXhQjmGcDDVTr48dXisM0dcGkMKHpJlFh7OVgj4SJuQQfa0zXgkaZOChoE6FBpbxuyNueo3X0tD2Q8EwSQTssO2A+6dS/5pgEia/X8q6VWBRFYY9CBtGXpSq5Yql4M4tpUgx00lzwpMVJF6DHeMmZQE4W26K9vP0Sp0IPK4ChProEiLDS8ms9flv3MPJJgWW9Dnc9lnn+Eulq8vUvBgEQpNRp8Kh7244Y7r2lUEyrZaFXZIgh3vNsCLgyFrR13qHs/tlHC7joYv2qV27/vDJntHB55+rGWfthiZ8NTr6A0RYd3goeKlFb5IjTf+wSaEOaRPZfk5Zq/fU2/h82hpi1VWecbmIoW7KxJSJLsO5TGg25YeoGAtI+d/94PfiEiOII4gm4FqPJvhIK3im0hNPsKodWjine88E12lXrbyLlEmGFtiIACsNRp9U1PBgEiN9LiClnS6aTCrEeq37QkJnrOypt8ywadd9JQDLZX+NDbRFVg6ZHw5AVFZoUuASI2VwsfG8SZWGXt/9M0+YIYOk8pU0e7Wv8rN0TeOP+x8VQtbKpv9T0dASI4Igkta83mebWvfI9P4AaAliNAocGXLG8U85e58zZSjupK52k97Jto9t9UMyK7XOEiM3zXlZfT/OncR+I+BfoU9kEVZ610XtGL1PQIN46PvSIp2Dj6LT3s/QIBIjFEa1+mNNEpHeLZXXxXCb0HwELBCw3vh4hfnVJlF1cYzH4lQNNdQ/BhIizFc0J2Th1XrQziUUM7VBMVRgphG79jSEkS7waa6gmwe9ynJX0gq1i3kaz0QqX535cWogllHkPBri+cp+ynp4X06G1jZIEgaeOKkjeN5nrQuU2j/piWD9I+WWpZTmsNpWaA97uzUSBXQjgQY3D/Ndcian4qiuyBsgqKCm4JOYd0sjVteYTHpKYBIEnCAfVvW7+FxFut9iiG9wzbcV/R+cKNBvMv/1TOoDhKnDw1skEgX8hi5nwPPcoSgBg21tuix2oP0etmffKgo/q3wWxYwSBANOziqWm2NWhPuyxHRHL7yfNSebZynLzwyO7a/y+DHtaxA3+BIEbAQgwdGYSXlf9H2QFBZuv36gO6Br5fGVcOfpPfUGwI='
audio_dec= base64.b64decode(audio_base64)
#print(base64.b64decode(audio_base64))
"""
with open("ode_2.ogg", "wb") as file:
    file.write(audio_dec)
"""  
r = sr.Recognizer()
"""
with sr.AudioFile("ode_2.ogg") as source:
    # listen for the data (load audio to memory)
    audio_data = r.record(source)
    # recognize (convert from speech to text)
    text = r.recognize_google(audio_data)
    print(text)
"""
class SpeechOggAudioFileToText:
    def __init__(self):
        self.recognizer = Recognizer()

    def ogg_to_wav(self, file):
        args = ['ffmpeg','-i', file, 'test.wav']
        process = Popen(args)
        process.wait()
    @property
    def text(self):
        AUDIO_FILE = 'test.wav'
        with AudioFile(AUDIO_FILE) as source:
            audio = self.recognizer.record(source)
        try:
            text = self.recognizer.recognize_google(audio, language='EN')
            return text
        except UnknownValueError:
            print("Не удаётся распознать аудио файл")
        except RequestError as error:
            print("Не удалось запросить результаты: {0}".format(error))      

    

def main():
    speech_ogg = SpeechOggAudioFileToText()
    speech_ogg.ogg_to_wav('ode_2.ogg')
    print(speech_ogg.text)

if __name__ == '__main__':
    main()
